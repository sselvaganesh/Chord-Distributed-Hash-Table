// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package chord

import (
	"bytes"
	"context"
	"reflect"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Message
type SystemException struct {
  Message *string `thrift:"message,1" db:"message" json:"message,omitempty"`
}

func NewSystemException() *SystemException {
  return &SystemException{}
}

var SystemException_Message_DEFAULT string
func (p *SystemException) GetMessage() string {
  if !p.IsSetMessage() {
    return SystemException_Message_DEFAULT
  }
return *p.Message
}
func (p *SystemException) IsSetMessage() bool {
  return p.Message != nil
}

func (p *SystemException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SystemException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = &v
}
  return nil
}

func (p *SystemException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SystemException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SystemException) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetMessage() {
    if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
    if err := oprot.WriteString(string(*p.Message)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  }
  return err
}

func (p *SystemException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SystemException(%+v)", *p)
}

func (p *SystemException) Error() string {
  return p.String()
}

// Attributes:
//  - Filename
//  - Version
//  - ContentHash
type RFileMetadata struct {
  Filename *string `thrift:"filename,1" db:"filename" json:"filename,omitempty"`
  Version *int32 `thrift:"version,2" db:"version" json:"version,omitempty"`
  ContentHash *string `thrift:"contentHash,3" db:"contentHash" json:"contentHash,omitempty"`
}

func NewRFileMetadata() *RFileMetadata {
  return &RFileMetadata{}
}

var RFileMetadata_Filename_DEFAULT string
func (p *RFileMetadata) GetFilename() string {
  if !p.IsSetFilename() {
    return RFileMetadata_Filename_DEFAULT
  }
return *p.Filename
}
var RFileMetadata_Version_DEFAULT int32
func (p *RFileMetadata) GetVersion() int32 {
  if !p.IsSetVersion() {
    return RFileMetadata_Version_DEFAULT
  }
return *p.Version
}
var RFileMetadata_ContentHash_DEFAULT string
func (p *RFileMetadata) GetContentHash() string {
  if !p.IsSetContentHash() {
    return RFileMetadata_ContentHash_DEFAULT
  }
return *p.ContentHash
}
func (p *RFileMetadata) IsSetFilename() bool {
  return p.Filename != nil
}

func (p *RFileMetadata) IsSetVersion() bool {
  return p.Version != nil
}

func (p *RFileMetadata) IsSetContentHash() bool {
  return p.ContentHash != nil
}

func (p *RFileMetadata) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RFileMetadata)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Filename = &v
}
  return nil
}

func (p *RFileMetadata)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Version = &v
}
  return nil
}

func (p *RFileMetadata)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ContentHash = &v
}
  return nil
}

func (p *RFileMetadata) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RFileMetadata"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RFileMetadata) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetFilename() {
    if err := oprot.WriteFieldBegin("filename", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:filename: ", p), err) }
    if err := oprot.WriteString(string(*p.Filename)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.filename (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:filename: ", p), err) }
  }
  return err
}

func (p *RFileMetadata) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetVersion() {
    if err := oprot.WriteFieldBegin("version", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:version: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Version)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.version (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:version: ", p), err) }
  }
  return err
}

func (p *RFileMetadata) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetContentHash() {
    if err := oprot.WriteFieldBegin("contentHash", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contentHash: ", p), err) }
    if err := oprot.WriteString(string(*p.ContentHash)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.contentHash (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contentHash: ", p), err) }
  }
  return err
}

func (p *RFileMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RFileMetadata(%+v)", *p)
}

// Attributes:
//  - Meta
//  - Content
type RFile struct {
  Meta *RFileMetadata `thrift:"meta,1" db:"meta" json:"meta,omitempty"`
  Content *string `thrift:"content,2" db:"content" json:"content,omitempty"`
}

func NewRFile() *RFile {
  return &RFile{}
}

var RFile_Meta_DEFAULT *RFileMetadata
func (p *RFile) GetMeta() *RFileMetadata {
  if !p.IsSetMeta() {
    return RFile_Meta_DEFAULT
  }
return p.Meta
}
var RFile_Content_DEFAULT string
func (p *RFile) GetContent() string {
  if !p.IsSetContent() {
    return RFile_Content_DEFAULT
  }
return *p.Content
}
func (p *RFile) IsSetMeta() bool {
  return p.Meta != nil
}

func (p *RFile) IsSetContent() bool {
  return p.Content != nil
}

func (p *RFile) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RFile)  ReadField1(iprot thrift.TProtocol) error {
  p.Meta = &RFileMetadata{}
  if err := p.Meta.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Meta), err)
  }
  return nil
}

func (p *RFile)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Content = &v
}
  return nil
}

func (p *RFile) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RFile"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RFile) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetMeta() {
    if err := oprot.WriteFieldBegin("meta", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:meta: ", p), err) }
    if err := p.Meta.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Meta), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:meta: ", p), err) }
  }
  return err
}

func (p *RFile) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetContent() {
    if err := oprot.WriteFieldBegin("content", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:content: ", p), err) }
    if err := oprot.WriteString(string(*p.Content)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.content (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:content: ", p), err) }
  }
  return err
}

func (p *RFile) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RFile(%+v)", *p)
}

// Attributes:
//  - ID
//  - IP
//  - Port
type NodeID struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  IP string `thrift:"ip,2" db:"ip" json:"ip"`
  Port int32 `thrift:"port,3" db:"port" json:"port"`
}

func NewNodeID() *NodeID {
  return &NodeID{}
}


func (p *NodeID) GetID() string {
  return p.ID
}

func (p *NodeID) GetIP() string {
  return p.IP
}

func (p *NodeID) GetPort() int32 {
  return p.Port
}
func (p *NodeID) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NodeID)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *NodeID)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IP = v
}
  return nil
}

func (p *NodeID)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Port = v
}
  return nil
}

func (p *NodeID) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("NodeID"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NodeID) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *NodeID) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ip", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ip: ", p), err) }
  if err := oprot.WriteString(string(p.IP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ip (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ip: ", p), err) }
  return err
}

func (p *NodeID) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("port", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:port: ", p), err) }
  if err := oprot.WriteI32(int32(p.Port)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.port (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:port: ", p), err) }
  return err
}

func (p *NodeID) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NodeID(%+v)", *p)
}

type FileStore interface {
  // Parameters:
  //  - RFile
  WriteFile(ctx context.Context, rFile *RFile) (err error)
  // Parameters:
  //  - Filename
  ReadFile(ctx context.Context, filename string) (r *RFile, err error)
  // Parameters:
  //  - NodeList
  SetFingertable(ctx context.Context, node_list []*NodeID) (err error)
  // Parameters:
  //  - Key
  FindSucc(ctx context.Context, key string) (r *NodeID, err error)
  // Parameters:
  //  - Key
  FindPred(ctx context.Context, key string) (r *NodeID, err error)
  GetNodeSucc(ctx context.Context) (r *NodeID, err error)
}

type FileStoreClient struct {
  c thrift.TClient
}

func NewFileStoreClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *FileStoreClient {
  return &FileStoreClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewFileStoreClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *FileStoreClient {
  return &FileStoreClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewFileStoreClient(c thrift.TClient) *FileStoreClient {
  return &FileStoreClient{
    c: c,
  }
}

func (p *FileStoreClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - RFile
func (p *FileStoreClient) WriteFile(ctx context.Context, rFile *RFile) (err error) {
  var _args0 FileStoreWriteFileArgs
  _args0.RFile = rFile
  var _result1 FileStoreWriteFileResult
  if err = p.Client_().Call(ctx, "writeFile", &_args0, &_result1); err != nil {
    return
  }
  switch {
  case _result1.SystemException!= nil:
    return _result1.SystemException
  }

  return nil
}

// Parameters:
//  - Filename
func (p *FileStoreClient) ReadFile(ctx context.Context, filename string) (r *RFile, err error) {
  var _args2 FileStoreReadFileArgs
  _args2.Filename = filename
  var _result3 FileStoreReadFileResult
  if err = p.Client_().Call(ctx, "readFile", &_args2, &_result3); err != nil {
    return
  }
  switch {
  case _result3.SystemException!= nil:
    return r, _result3.SystemException
  }

  return _result3.GetSuccess(), nil
}

// Parameters:
//  - NodeList
func (p *FileStoreClient) SetFingertable(ctx context.Context, node_list []*NodeID) (err error) {
  var _args4 FileStoreSetFingertableArgs
  _args4.NodeList = node_list
  var _result5 FileStoreSetFingertableResult
  if err = p.Client_().Call(ctx, "setFingertable", &_args4, &_result5); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - Key
func (p *FileStoreClient) FindSucc(ctx context.Context, key string) (r *NodeID, err error) {
  var _args6 FileStoreFindSuccArgs
  _args6.Key = key
  var _result7 FileStoreFindSuccResult
  if err = p.Client_().Call(ctx, "findSucc", &_args6, &_result7); err != nil {
    return
  }
  switch {
  case _result7.SystemException!= nil:
    return r, _result7.SystemException
  }

  return _result7.GetSuccess(), nil
}

// Parameters:
//  - Key
func (p *FileStoreClient) FindPred(ctx context.Context, key string) (r *NodeID, err error) {
  var _args8 FileStoreFindPredArgs
  _args8.Key = key
  var _result9 FileStoreFindPredResult
  if err = p.Client_().Call(ctx, "findPred", &_args8, &_result9); err != nil {
    return
  }
  switch {
  case _result9.SystemException!= nil:
    return r, _result9.SystemException
  }

  return _result9.GetSuccess(), nil
}

func (p *FileStoreClient) GetNodeSucc(ctx context.Context) (r *NodeID, err error) {
  var _args10 FileStoreGetNodeSuccArgs
  var _result11 FileStoreGetNodeSuccResult
  if err = p.Client_().Call(ctx, "getNodeSucc", &_args10, &_result11); err != nil {
    return
  }
  switch {
  case _result11.SystemException!= nil:
    return r, _result11.SystemException
  }

  return _result11.GetSuccess(), nil
}

type FileStoreProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler FileStore
}

func (p *FileStoreProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *FileStoreProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *FileStoreProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewFileStoreProcessor(handler FileStore) *FileStoreProcessor {

  self12 := &FileStoreProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self12.processorMap["writeFile"] = &fileStoreProcessorWriteFile{handler:handler}
  self12.processorMap["readFile"] = &fileStoreProcessorReadFile{handler:handler}
  self12.processorMap["setFingertable"] = &fileStoreProcessorSetFingertable{handler:handler}
  self12.processorMap["findSucc"] = &fileStoreProcessorFindSucc{handler:handler}
  self12.processorMap["findPred"] = &fileStoreProcessorFindPred{handler:handler}
  self12.processorMap["getNodeSucc"] = &fileStoreProcessorGetNodeSucc{handler:handler}
return self12
}

func (p *FileStoreProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x13 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x13.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x13

}

type fileStoreProcessorWriteFile struct {
  handler FileStore
}

func (p *fileStoreProcessorWriteFile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FileStoreWriteFileArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("writeFile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := FileStoreWriteFileResult{}
  var err2 error
  if err2 = p.handler.WriteFile(ctx, args.RFile); err2 != nil {
  switch v := err2.(type) {
    case *SystemException:
  result.SystemException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing writeFile: " + err2.Error())
    oprot.WriteMessageBegin("writeFile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("writeFile", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type fileStoreProcessorReadFile struct {
  handler FileStore
}

func (p *fileStoreProcessorReadFile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FileStoreReadFileArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("readFile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := FileStoreReadFileResult{}
var retval *RFile
  var err2 error
  if retval, err2 = p.handler.ReadFile(ctx, args.Filename); err2 != nil {
  switch v := err2.(type) {
    case *SystemException:
  result.SystemException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readFile: " + err2.Error())
    oprot.WriteMessageBegin("readFile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("readFile", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type fileStoreProcessorSetFingertable struct {
  handler FileStore
}

func (p *fileStoreProcessorSetFingertable) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FileStoreSetFingertableArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("setFingertable", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := FileStoreSetFingertableResult{}
  var err2 error
  if err2 = p.handler.SetFingertable(ctx, args.NodeList); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setFingertable: " + err2.Error())
    oprot.WriteMessageBegin("setFingertable", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("setFingertable", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type fileStoreProcessorFindSucc struct {
  handler FileStore
}

func (p *fileStoreProcessorFindSucc) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FileStoreFindSuccArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("findSucc", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := FileStoreFindSuccResult{}
var retval *NodeID
  var err2 error
  if retval, err2 = p.handler.FindSucc(ctx, args.Key); err2 != nil {
  switch v := err2.(type) {
    case *SystemException:
  result.SystemException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findSucc: " + err2.Error())
    oprot.WriteMessageBegin("findSucc", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("findSucc", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type fileStoreProcessorFindPred struct {
  handler FileStore
}

func (p *fileStoreProcessorFindPred) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FileStoreFindPredArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("findPred", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := FileStoreFindPredResult{}
var retval *NodeID
  var err2 error
  if retval, err2 = p.handler.FindPred(ctx, args.Key); err2 != nil {
  switch v := err2.(type) {
    case *SystemException:
  result.SystemException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findPred: " + err2.Error())
    oprot.WriteMessageBegin("findPred", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("findPred", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type fileStoreProcessorGetNodeSucc struct {
  handler FileStore
}

func (p *fileStoreProcessorGetNodeSucc) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FileStoreGetNodeSuccArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getNodeSucc", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := FileStoreGetNodeSuccResult{}
var retval *NodeID
  var err2 error
  if retval, err2 = p.handler.GetNodeSucc(ctx); err2 != nil {
  switch v := err2.(type) {
    case *SystemException:
  result.SystemException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getNodeSucc: " + err2.Error())
    oprot.WriteMessageBegin("getNodeSucc", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getNodeSucc", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RFile
type FileStoreWriteFileArgs struct {
  RFile *RFile `thrift:"rFile,1" db:"rFile" json:"rFile"`
}

func NewFileStoreWriteFileArgs() *FileStoreWriteFileArgs {
  return &FileStoreWriteFileArgs{}
}

var FileStoreWriteFileArgs_RFile_DEFAULT *RFile
func (p *FileStoreWriteFileArgs) GetRFile() *RFile {
  if !p.IsSetRFile() {
    return FileStoreWriteFileArgs_RFile_DEFAULT
  }
return p.RFile
}
func (p *FileStoreWriteFileArgs) IsSetRFile() bool {
  return p.RFile != nil
}

func (p *FileStoreWriteFileArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FileStoreWriteFileArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.RFile = &RFile{}
  if err := p.RFile.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RFile), err)
  }
  return nil
}

func (p *FileStoreWriteFileArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("writeFile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FileStoreWriteFileArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rFile", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rFile: ", p), err) }
  if err := p.RFile.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RFile), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rFile: ", p), err) }
  return err
}

func (p *FileStoreWriteFileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FileStoreWriteFileArgs(%+v)", *p)
}

// Attributes:
//  - SystemException
type FileStoreWriteFileResult struct {
  SystemException *SystemException `thrift:"systemException,1" db:"systemException" json:"systemException,omitempty"`
}

func NewFileStoreWriteFileResult() *FileStoreWriteFileResult {
  return &FileStoreWriteFileResult{}
}

var FileStoreWriteFileResult_SystemException_DEFAULT *SystemException
func (p *FileStoreWriteFileResult) GetSystemException() *SystemException {
  if !p.IsSetSystemException() {
    return FileStoreWriteFileResult_SystemException_DEFAULT
  }
return p.SystemException
}
func (p *FileStoreWriteFileResult) IsSetSystemException() bool {
  return p.SystemException != nil
}

func (p *FileStoreWriteFileResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FileStoreWriteFileResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SystemException = &SystemException{}
  if err := p.SystemException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
  }
  return nil
}

func (p *FileStoreWriteFileResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("writeFile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FileStoreWriteFileResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSystemException() {
    if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:systemException: ", p), err) }
    if err := p.SystemException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:systemException: ", p), err) }
  }
  return err
}

func (p *FileStoreWriteFileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FileStoreWriteFileResult(%+v)", *p)
}

// Attributes:
//  - Filename
type FileStoreReadFileArgs struct {
  Filename string `thrift:"filename,1" db:"filename" json:"filename"`
}

func NewFileStoreReadFileArgs() *FileStoreReadFileArgs {
  return &FileStoreReadFileArgs{}
}


func (p *FileStoreReadFileArgs) GetFilename() string {
  return p.Filename
}
func (p *FileStoreReadFileArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FileStoreReadFileArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Filename = v
}
  return nil
}

func (p *FileStoreReadFileArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readFile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FileStoreReadFileArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("filename", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:filename: ", p), err) }
  if err := oprot.WriteString(string(p.Filename)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.filename (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:filename: ", p), err) }
  return err
}

func (p *FileStoreReadFileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FileStoreReadFileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - SystemException
type FileStoreReadFileResult struct {
  Success *RFile `thrift:"success,0" db:"success" json:"success,omitempty"`
  SystemException *SystemException `thrift:"systemException,1" db:"systemException" json:"systemException,omitempty"`
}

func NewFileStoreReadFileResult() *FileStoreReadFileResult {
  return &FileStoreReadFileResult{}
}

var FileStoreReadFileResult_Success_DEFAULT *RFile
func (p *FileStoreReadFileResult) GetSuccess() *RFile {
  if !p.IsSetSuccess() {
    return FileStoreReadFileResult_Success_DEFAULT
  }
return p.Success
}
var FileStoreReadFileResult_SystemException_DEFAULT *SystemException
func (p *FileStoreReadFileResult) GetSystemException() *SystemException {
  if !p.IsSetSystemException() {
    return FileStoreReadFileResult_SystemException_DEFAULT
  }
return p.SystemException
}
func (p *FileStoreReadFileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FileStoreReadFileResult) IsSetSystemException() bool {
  return p.SystemException != nil
}

func (p *FileStoreReadFileResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FileStoreReadFileResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &RFile{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *FileStoreReadFileResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SystemException = &SystemException{}
  if err := p.SystemException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
  }
  return nil
}

func (p *FileStoreReadFileResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readFile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FileStoreReadFileResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FileStoreReadFileResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSystemException() {
    if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:systemException: ", p), err) }
    if err := p.SystemException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:systemException: ", p), err) }
  }
  return err
}

func (p *FileStoreReadFileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FileStoreReadFileResult(%+v)", *p)
}

// Attributes:
//  - NodeList
type FileStoreSetFingertableArgs struct {
  NodeList []*NodeID `thrift:"node_list,1" db:"node_list" json:"node_list"`
}

func NewFileStoreSetFingertableArgs() *FileStoreSetFingertableArgs {
  return &FileStoreSetFingertableArgs{}
}


func (p *FileStoreSetFingertableArgs) GetNodeList() []*NodeID {
  return p.NodeList
}
func (p *FileStoreSetFingertableArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FileStoreSetFingertableArgs)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*NodeID, 0, size)
  p.NodeList =  tSlice
  for i := 0; i < size; i ++ {
    _elem14 := &NodeID{}
    if err := _elem14.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
    }
    p.NodeList = append(p.NodeList, _elem14)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FileStoreSetFingertableArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setFingertable_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FileStoreSetFingertableArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("node_list", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:node_list: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.NodeList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.NodeList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:node_list: ", p), err) }
  return err
}

func (p *FileStoreSetFingertableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FileStoreSetFingertableArgs(%+v)", *p)
}

type FileStoreSetFingertableResult struct {
}

func NewFileStoreSetFingertableResult() *FileStoreSetFingertableResult {
  return &FileStoreSetFingertableResult{}
}

func (p *FileStoreSetFingertableResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FileStoreSetFingertableResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setFingertable_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FileStoreSetFingertableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FileStoreSetFingertableResult(%+v)", *p)
}

// Attributes:
//  - Key
type FileStoreFindSuccArgs struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
}

func NewFileStoreFindSuccArgs() *FileStoreFindSuccArgs {
  return &FileStoreFindSuccArgs{}
}


func (p *FileStoreFindSuccArgs) GetKey() string {
  return p.Key
}
func (p *FileStoreFindSuccArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FileStoreFindSuccArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *FileStoreFindSuccArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findSucc_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FileStoreFindSuccArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *FileStoreFindSuccArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FileStoreFindSuccArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - SystemException
type FileStoreFindSuccResult struct {
  Success *NodeID `thrift:"success,0" db:"success" json:"success,omitempty"`
  SystemException *SystemException `thrift:"systemException,1" db:"systemException" json:"systemException,omitempty"`
}

func NewFileStoreFindSuccResult() *FileStoreFindSuccResult {
  return &FileStoreFindSuccResult{}
}

var FileStoreFindSuccResult_Success_DEFAULT *NodeID
func (p *FileStoreFindSuccResult) GetSuccess() *NodeID {
  if !p.IsSetSuccess() {
    return FileStoreFindSuccResult_Success_DEFAULT
  }
return p.Success
}
var FileStoreFindSuccResult_SystemException_DEFAULT *SystemException
func (p *FileStoreFindSuccResult) GetSystemException() *SystemException {
  if !p.IsSetSystemException() {
    return FileStoreFindSuccResult_SystemException_DEFAULT
  }
return p.SystemException
}
func (p *FileStoreFindSuccResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FileStoreFindSuccResult) IsSetSystemException() bool {
  return p.SystemException != nil
}

func (p *FileStoreFindSuccResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FileStoreFindSuccResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &NodeID{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *FileStoreFindSuccResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SystemException = &SystemException{}
  if err := p.SystemException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
  }
  return nil
}

func (p *FileStoreFindSuccResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findSucc_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FileStoreFindSuccResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FileStoreFindSuccResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSystemException() {
    if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:systemException: ", p), err) }
    if err := p.SystemException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:systemException: ", p), err) }
  }
  return err
}

func (p *FileStoreFindSuccResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FileStoreFindSuccResult(%+v)", *p)
}

// Attributes:
//  - Key
type FileStoreFindPredArgs struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
}

func NewFileStoreFindPredArgs() *FileStoreFindPredArgs {
  return &FileStoreFindPredArgs{}
}


func (p *FileStoreFindPredArgs) GetKey() string {
  return p.Key
}
func (p *FileStoreFindPredArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FileStoreFindPredArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *FileStoreFindPredArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findPred_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FileStoreFindPredArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *FileStoreFindPredArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FileStoreFindPredArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - SystemException
type FileStoreFindPredResult struct {
  Success *NodeID `thrift:"success,0" db:"success" json:"success,omitempty"`
  SystemException *SystemException `thrift:"systemException,1" db:"systemException" json:"systemException,omitempty"`
}

func NewFileStoreFindPredResult() *FileStoreFindPredResult {
  return &FileStoreFindPredResult{}
}

var FileStoreFindPredResult_Success_DEFAULT *NodeID
func (p *FileStoreFindPredResult) GetSuccess() *NodeID {
  if !p.IsSetSuccess() {
    return FileStoreFindPredResult_Success_DEFAULT
  }
return p.Success
}
var FileStoreFindPredResult_SystemException_DEFAULT *SystemException
func (p *FileStoreFindPredResult) GetSystemException() *SystemException {
  if !p.IsSetSystemException() {
    return FileStoreFindPredResult_SystemException_DEFAULT
  }
return p.SystemException
}
func (p *FileStoreFindPredResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FileStoreFindPredResult) IsSetSystemException() bool {
  return p.SystemException != nil
}

func (p *FileStoreFindPredResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FileStoreFindPredResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &NodeID{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *FileStoreFindPredResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SystemException = &SystemException{}
  if err := p.SystemException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
  }
  return nil
}

func (p *FileStoreFindPredResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findPred_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FileStoreFindPredResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FileStoreFindPredResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSystemException() {
    if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:systemException: ", p), err) }
    if err := p.SystemException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:systemException: ", p), err) }
  }
  return err
}

func (p *FileStoreFindPredResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FileStoreFindPredResult(%+v)", *p)
}

type FileStoreGetNodeSuccArgs struct {
}

func NewFileStoreGetNodeSuccArgs() *FileStoreGetNodeSuccArgs {
  return &FileStoreGetNodeSuccArgs{}
}

func (p *FileStoreGetNodeSuccArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FileStoreGetNodeSuccArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getNodeSucc_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FileStoreGetNodeSuccArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FileStoreGetNodeSuccArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - SystemException
type FileStoreGetNodeSuccResult struct {
  Success *NodeID `thrift:"success,0" db:"success" json:"success,omitempty"`
  SystemException *SystemException `thrift:"systemException,1" db:"systemException" json:"systemException,omitempty"`
}

func NewFileStoreGetNodeSuccResult() *FileStoreGetNodeSuccResult {
  return &FileStoreGetNodeSuccResult{}
}

var FileStoreGetNodeSuccResult_Success_DEFAULT *NodeID
func (p *FileStoreGetNodeSuccResult) GetSuccess() *NodeID {
  if !p.IsSetSuccess() {
    return FileStoreGetNodeSuccResult_Success_DEFAULT
  }
return p.Success
}
var FileStoreGetNodeSuccResult_SystemException_DEFAULT *SystemException
func (p *FileStoreGetNodeSuccResult) GetSystemException() *SystemException {
  if !p.IsSetSystemException() {
    return FileStoreGetNodeSuccResult_SystemException_DEFAULT
  }
return p.SystemException
}
func (p *FileStoreGetNodeSuccResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FileStoreGetNodeSuccResult) IsSetSystemException() bool {
  return p.SystemException != nil
}

func (p *FileStoreGetNodeSuccResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FileStoreGetNodeSuccResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &NodeID{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *FileStoreGetNodeSuccResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SystemException = &SystemException{}
  if err := p.SystemException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
  }
  return nil
}

func (p *FileStoreGetNodeSuccResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getNodeSucc_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FileStoreGetNodeSuccResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FileStoreGetNodeSuccResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSystemException() {
    if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:systemException: ", p), err) }
    if err := p.SystemException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:systemException: ", p), err) }
  }
  return err
}

func (p *FileStoreGetNodeSuccResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FileStoreGetNodeSuccResult(%+v)", *p)
}


